{"version":3,"sources":["utilities/logger.js","utilities/constants/index.js","App.js","store/actions/postActions.js","reportWebVitals.js","store/reducers/postReducers.js","store/reducers/index.js","utilities/request.js","store/sagas/postSagas.js","store/sagas/index.js","store/index.js","index.js"],"names":["logger","error","header","err","process","NODE_ENV","console","log","stack","loggerError","apiError","config","url","data","response","status","JSON","stringify","replace","request","text","expandJson","noJsonExpand","actionTypes","GET_POSTS_REQUESTED","GET_POSTS_SUCCEEDED","GET_POSTS_FAILED","requestMethods","urls","App","props","dispatch","useDispatch","posts","useSelector","state","post","gettingPosts","useEffect","type","className","style","paddingBottom","minHeight","display","flex","alignItems","justifyContent","color","height","width","map","marginTop","background","padding","borderRadius","marginBottom","fontSize","fontWeight","title","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","loading","postReducer","payload","SESSION_EXPIRED","combineReducers","axios","Axios","create","baseURL","validateStatus","store","SESSION_EXPIRE_REQUESTED","params","showAlert","Promise","resolve","getAllPostsSaga","method","call","key","String","id","splice","put","rootSaga","takeLatest","sagaMiddleware","createSagaMiddleware","createStore","reducers","compose","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0GAAA,YACA,IAAMA,EAAS,CACbC,MAAO,SAACC,EAAQC,GAAS,IAAD,IAEtB,KAAW,QAAP,EAAAC,SAAA,0LAAcC,UAAlB,CAIKF,IACHA,EAAMD,EACNA,EAAS,SAGXI,QAAQC,IAAI,MAEZ,IACOJ,EAAIK,MAGPF,QAAQC,IAAR,aAAkBL,EAAlB,KAA6B,+BAAgCC,EAAIK,OAFjEF,QAAQC,IAAR,aAAkBL,EAAlB,KAA6B,+BAAgCC,GAI/DG,QAAQC,IAAI,MACZ,MAAOE,GACPH,QAAQC,IAAR,aAAkBL,EAAlB,KAA6B,+BAAgCC,GAC7DG,QAAQC,IAAI,SAIhBG,SAAU,SAACR,EAAQD,GAAW,IAAD,IAE3B,KAAW,QAAP,EAAAG,SAAA,0LAAcC,UAAlB,CAIAC,QAAQC,IAAI,MAEPN,IACHA,EAAQC,EACRA,EAAS,aAGXI,QAAQC,IAAR,aAAkBL,EAAlB,KAA6B,gCAE7B,IACMD,EAAMU,SACRL,QAAQC,IACN,UAAW,kCACXN,EAAMU,OAAOC,KAEfN,QAAQC,IACN,WAAY,mCACZN,EAAMU,OAAOE,OAIbZ,EAAMa,UAQJb,EAAMa,SAASC,QACjBT,QAAQC,IACN,kBAAmB,kCACnBN,EAAMa,SAASC,QAIfd,EAAMa,SAASD,MACjBP,QAAQC,IACN,oBAAqB,kCACrBS,KAAKC,UAAUhB,EAAMa,SAASD,KAAM,KAAM,GAAGK,QAAQ,KAAM,MAGtDjB,EAAMkB,QAKfb,QAAQC,IACN,cAAe,kCACfN,EAAMkB,SAIRb,QAAQC,IAAIN,GAEd,MAAOE,GACPG,QAAQC,IAAI,YAAaJ,GAG3BG,QAAQC,IAAI,QAEdA,IAAK,SAACL,EAAQkB,EAAMC,GAAgB,IAAD,IAEjC,KAAW,QAAP,EAAAjB,SAAA,0LAAcC,UAAlB,CAGAC,QAAQC,IAAI,MAEZ,IACOa,IACHA,EAAOlB,EACPA,EAAS,OAGPmB,EACFf,QAAQC,IAAR,aACQL,EADR,KACmB,iCACjBc,KAAKC,UAAUG,EAAM,KAAM,GAAGF,QAAQ,KAAM,KAG9CZ,QAAQC,IAAR,aAAkBL,EAAlB,KAA6B,iCAAkCkB,GAGjEd,QAAQC,IAAI,MACZ,MAAOJ,GACPG,QAAQC,IAAR,aAAkBL,EAAlB,KAA6B,iCAAkCkB,GAC/Dd,QAAQC,IAAI,SAGhBM,KAAM,SAACX,EAAQkB,EAAME,GAAkB,IAAD,IAEpC,KAAW,QAAP,EAAAlB,SAAA,0LAAcC,UAAlB,CAIAC,QAAQC,IAAI,MAEZ,IACOa,IACHA,EAAOlB,EACPA,EAAS,QAGPoB,EACFhB,QAAQC,IAAR,aAAkBL,EAAlB,KAA6B,mCAAoCkB,GAEjEd,QAAQC,IAAR,aACQL,EADR,KACmB,mCACjBc,KAAKC,UAAUG,EAAM,KAAM,GAAGF,QAAQ,MAAO,KAIjDZ,QAAQC,IAAI,MACZ,MAAOJ,GACPG,QAAQC,IAAR,aAAkBL,EAAlB,KAA6B,mCAAoCkB,GACjEd,QAAQC,IAAI,UAKHP,Q,sLC1JFuB,EAAc,CACzBC,oBAAqB,sBACrBC,oBAAqB,sBACrBC,iBAAkB,oBAGPC,EAEN,MAIMC,EACF,uCADEA,EAED,QC2EGC,MAlFf,SAAaC,GACX,IAAMC,EAAWC,cACXC,EAAQC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,SACxCI,EAAeH,aAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAKC,gBAgErD,OA9DAC,qBAAU,WACRP,ECXuB,CACzBQ,KAAMhB,EAAYC,wBDWf,CAACO,IAEJzB,QAAQC,IAAI,UAAW0B,GA2DrB,sBAAKO,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,wCAKF,sBAAMC,MAAO,CAAEC,cAAe,GAAIC,UAAW,QAA7C,SA/DEN,EAEA,qBACEI,MAAO,CACLG,QAAS,OACTD,UAAW,OACXE,KAAM,EACNC,WAAY,SACZC,eAAgB,UANpB,SASE,cAAC,IAAD,CACER,KAAM,OACNS,MAAM,UACNC,OAAQ,IACRC,MAAO,QAMRjB,EAAMkB,KAAI,SAACf,GAAD,OACf,sBACEK,MAAO,CACLW,UAAW,GACXC,WAAY,UACZC,QAAS,GACTC,aAAc,IALlB,UAQE,mBACEd,MAAO,CACLW,UAAW,EACXI,aAAc,EACdR,MAAO,QACPS,SAAU,GACVC,WAAY,QANhB,SASGtB,EAAKuB,QAER,mBACElB,MAAO,CACLW,UAAW,EACXI,aAAc,EACdR,MAAO,QACPS,SAAU,IALd,SAQGrB,EAAKwB,mBExDDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,uBCLRQ,EAAe,CACnBrC,MAAO,GACPsC,SAAS,EACTlC,cAAc,GAgBDmC,EAbK,WAA8C,IAA7CrC,EAA4C,uDAApCmC,EAAoC,yCAApB/B,EAAoB,EAApBA,KAAMkC,EAAc,EAAdA,QACjD,OAAQlC,GACN,KAAKhB,EAAYmD,gBACf,OAAO,eAAKJ,GACd,KAAK/C,EAAYE,oBACf,OAAO,2BAAKU,GAAZ,IAAmBF,MAAOwC,EAAQxC,MAAOI,cAAc,IACzD,KAAKd,EAAYG,iBACf,OAAO,2BAAKS,GAAZ,IAAmBE,cAAc,IACnC,QACE,OAAOF,ICbEwC,cAAgB,CAAEvC,S,gCCCpBwC,E,OAAQC,EAAMC,OAAO,CAChCC,QAASnD,EACToD,eAAgB,SAACjE,GACf,OAAe,MAAXA,GAA6B,MAAXA,KAObI,EAAU,SAACR,GAAD,OAAgCiE,EAAMjE,GAAQqD,MAAK,SAAClD,GACzE,OAAwB,MAApBA,EAASC,QACXkE,EAAMlD,SAAS,CACbQ,KAAMhB,EAAY2D,yBAClBC,OAAQ,CAAEC,WAAW,KAGhBC,QAAQC,QAAQ,CAAEzE,KAAM,MAE1BC,M,mBClBCyE,GAAV,SAAUA,IAAV,6EAOmB,OAPnB,SAEU5E,EAAS,CACbC,IAAKgB,EACL4D,OAAQ7D,GAJd,SAOyB8D,YAAKtE,EAASR,GAPvC,OAoBI,OApBJ,SAOUE,EAPV,EAOUA,KAENb,IAAOa,KAAK,yBAA0BA,GAAM,GAE5CA,EAAOA,EAAKsC,KAAI,SAACf,GAEf,OADAA,EAAKsD,IAAMC,OAAOvD,EAAKwD,IAChBxD,KAGHqC,EAAU,CACdxC,MAAOpB,EAAKgF,OAAO,EAAG,KAjB5B,UAoBUC,YAAI,CAAEvD,KAAMhB,EAAYE,oBAAqBgD,YApBvD,gCAuBI,OAvBJ,0BAsBIzE,IAAOC,MAAM,mBAAb,MAtBJ,UAuBU6F,YAAI,CAAEvD,KAAMhB,EAAYG,mBAvBlC,sD,eCDyBqE,GAAV,SAAUA,IAAV,iEACb,OADa,SACPC,YAAWzE,EAAYC,oBAAqB+D,GADrC,uCCAf,IAAMU,EAAiBC,cAEjBjB,EAAQkB,YACZC,EACAC,YAAQC,YAAgBL,KAG1BA,EAAeM,IAAIR,GAEJd,QCLfuB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUzB,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJ0B,SAASC,eAAe,SAM1B/C,M","file":"static/js/main.050c4f54.chunk.js","sourcesContent":["/* eslint-disable no-param-reassign */\nconst logger = {\n  error: (header, err) => {\n    //to disable log in production mode\n    if (process?.env?.NODE_ENV && process.env.NODE_ENV !== 'development') {\n      return;\n    }\n\n    if (!err) { //single argument is passed;\n      err = header;\n      header = 'ERROR';\n    }\n\n    console.log('\\n');\n\n    try {\n      if (!err.stack) {\n        console.log(`%c ${header} `, 'background:red;color:#FFFFFF', err);\n      } else {\n        console.log(`%c ${header} `, 'background:red;color:#FFFFFF', err.stack);\n      }\n      console.log('\\n');\n    } catch (loggerError) {\n      console.log(`%c ${header} `, 'background:red;color:#FFFFFF', err);\n      console.log('\\n');\n    }\n  },\n\n  apiError: (header, error) => {\n    //to disable log in production mode\n    if (process?.env?.NODE_ENV && process.env.NODE_ENV !== 'development') {\n      return;\n    }\n\n    console.log('\\n');\n\n    if (!error) { //single argument is passed;\n      error = header;\n      header = 'API ERROR';\n    }\n\n    console.log(`%c ${header} `, 'background:red;color:#FFFFFF');\n\n    try {\n      if (error.config) {\n        console.log(\n          '%c URL ', 'background:orange;color:#FFFFFF',\n          error.config.url\n        );\n        console.log(\n          '%c DATA ', 'background:#00ffff;color:#FFFFFF',\n          error.config.data\n        );\n      }\n\n      if (error.response) {\n        // The request was made and the server responded with a status code\n        // that falls out of the range of 2xx\n\n        /* console.log(error.response.data);\n        console.log(error.response.status);\n        console.log(error.response.headers); */\n\n        if (error.response.status) {\n          console.log(\n            '%c STATUS CODE ', 'background:orange;color:#FFFFFF',\n            error.response.status\n          );\n        }\n\n        if (error.response.data) {\n          console.log(\n            '%c RESPONSE DATA ', 'background:orange;color:#FFFFFF',\n            JSON.stringify(error.response.data, null, 4).replace(/'/g, '')\n          );\n        }\n      } else if (error.request) {\n        // The request was made but no response was received\n        // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n        // http.ClientRequest in node.js\n\n        console.log(\n          '%c REQUEST ', 'background:orange;color:#FFFFFF',\n          error.request\n        );\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        console.log(error);\n      }\n    } catch (err) {\n      console.log('API ERROR', err);\n    }\n\n    console.log('\\n');\n  },\n  log: (header, text, expandJson) => {\n    //to disable log in production mode\n    if (process?.env?.NODE_ENV && process.env.NODE_ENV !== 'development') {\n      return;\n    }\n    console.log('\\n');\n\n    try {\n      if (!text) {\n        text = header;\n        header = 'LOG';\n      }\n\n      if (expandJson) {\n        console.log(\n          `%c ${header} `, 'background:green;color:#FFFFFF',\n          JSON.stringify(text, null, 4).replace(/'/g, '')\n        );\n      } else {\n        console.log(`%c ${header} `, 'background:green;color:#FFFFFF', text);\n      }\n\n      console.log('\\n');\n    } catch (err) {\n      console.log(`%c ${header} `, 'background:green;color:#FFFFFF', text);\n      console.log('\\n');\n    }\n  },\n  data: (header, text, noJsonExpand) => {\n    //to disable log in production mode\n    if (process?.env?.NODE_ENV && process.env.NODE_ENV !== 'development') {\n      return;\n    }\n\n    console.log('\\n');\n\n    try {\n      if (!text) {\n        text = header;\n        header = 'DATA';\n      }\n\n      if (noJsonExpand) {\n        console.log(`%c ${header} `, 'background:#00ffff;color:#FFFFFF', text);\n      } else {\n        console.log(\n          `%c ${header} `, 'background:#00ffff;color:#FFFFFF',\n          JSON.stringify(text, null, 4).replace(/\\\\/g, '')\n        );\n      }\n\n      console.log('\\n');\n    } catch (err) {\n      console.log(`%c ${header} `, 'background:#00ffff;color:#FFFFFF', text);\n      console.log('\\n');\n    }\n  }\n};\n\nexport default logger;\n","export const actionTypes = {\n  GET_POSTS_REQUESTED: 'GET_POSTS_REQUESTED',\n  GET_POSTS_SUCCEEDED: 'GET_POSTS_SUCCEEDED',\n  GET_POSTS_FAILED: 'GET_POSTS_FAILED',\n};\n\nexport const requestMethods = {\n  POST: 'POST',\n  GET: 'GET',\n  PUT: 'PUT'\n};\n\nexport const urls = {\n  baseUrl: 'https://jsonplaceholder.typicode.com',\n  getPosts: 'posts',\n};","import './App.css';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Loader from 'react-loader-spinner';\n\nimport { getAllPosts } from './store/actions';\n\nfunction App(props) {\n  const dispatch = useDispatch();\n  const posts = useSelector(state => state.post.posts);\n  const gettingPosts = useSelector(state => state.post.gettingPosts);\n\n  useEffect(() => {\n    dispatch(getAllPosts())\n  }, [dispatch]);\n\n  console.log('posts: ', posts)\n\n  const renderContent = () => {\n    if (gettingPosts) {\n      return (\n        <div\n          style={{\n            display: 'flex',\n            minHeight: '84vh',\n            flex: 1,\n            alignItems: 'center',\n            justifyContent: 'center'\n          }}\n        >\n          <Loader\n            type={'Puff'}\n            color=\"#00BFFF\"\n            height={100}\n            width={100}\n          />\n        </div>\n      );\n    }\n\n    return posts.map((post) => (\n      <div\n        style={{\n          marginTop: 10,\n          background: '#0A79DF',\n          padding: 15,\n          borderRadius: 10,\n        }}\n      >\n        <p\n          style={{\n            marginTop: 0,\n            marginBottom: 0,\n            color: 'white',\n            fontSize: 16,\n            fontWeight: 'bold'\n          }}\n        >\n          {post.title}\n        </p>\n        <p\n          style={{\n            marginTop: 0,\n            marginBottom: 0,\n            color: 'white',\n            fontSize: 14\n          }}\n        >\n          {post.body}\n        </p>\n      </div>\n    ));\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Posts\n        </p>\n      </header>\n\n      <body style={{ paddingBottom: 40, minHeight: '84vh' }}>\n        {renderContent()}\n      </body>\n    </div>\n  );\n}\n\nexport default App;\n","import { actionTypes } from '../../utilities/constants';\n\nconst getAllPosts = () => ({\n  type: actionTypes.GET_POSTS_REQUESTED\n});\n\nexport {\n  getAllPosts\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { actionTypes } from '../../utilities/constants';\r\n\r\nconst initialState = {\r\n  posts: [],\r\n  loading: false,\r\n  gettingPosts: true\r\n};\r\n\r\nconst postReducer = (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case actionTypes.SESSION_EXPIRED:\r\n      return { ...initialState };\r\n    case actionTypes.GET_POSTS_SUCCEEDED:\r\n      return { ...state, posts: payload.posts, gettingPosts: false };\r\n    case actionTypes.GET_POSTS_FAILED:\r\n      return { ...state, gettingPosts: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default postReducer;\r\n","import { combineReducers } from 'redux';\n\nimport post from './postReducers';\n\nexport default combineReducers({ post });\n","import Axios, { AxiosRequestConfig } from 'axios';\r\n\r\nimport { urls, actionTypes } from './constants';\r\nimport store from '../store';\r\n\r\nexport const axios = Axios.create({\r\n  baseURL: urls.baseUrl,\r\n  validateStatus: (status) => {\r\n    if (status === 200 || status === 401) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n});\r\n\r\nexport const request = (config: AxiosRequestConfig) => axios(config).then((response) => {\r\n  if (response.status === 401) {\r\n    store.dispatch({\r\n      type: actionTypes.SESSION_EXPIRE_REQUESTED,\r\n      params: { showAlert: true }\r\n    });\r\n\r\n    return Promise.resolve({ data: {} });\r\n  }\r\n  return response;\r\n});\r\n","import { call, put } from 'redux-saga/effects';\n\nimport { urls, requestMethods, actionTypes } from '../../utilities/constants';\nimport { request } from '../../utilities/request';\nimport logger from '../../utilities/logger';\n\nfunction* getAllPostsSaga() {\n  try {\n    const config = {\n      url: urls.getPosts,\n      method: requestMethods.GET,\n    };\n\n    let { data } = yield call(request, config);\n\n    logger.data('getPosts response is: ', data, true);\n\n    data = data.map((post) => {\n      post.key = String(post.id);\n      return post;\n    });\n\n    const payload = {\n      posts: data.splice(0, 50),\n    };\n\n    yield put({ type: actionTypes.GET_POSTS_SUCCEEDED, payload });\n  } catch (error) {\n    logger.error('getPosts error: ', error);\n    yield put({ type: actionTypes.GET_POSTS_FAILED, });\n  }\n}\n\nexport {\n  getAllPostsSaga\n};\n","import { takeLatest } from 'redux-saga/effects';\n\nimport { actionTypes } from '../../utilities/constants';\nimport { getAllPostsSaga } from './postSagas';\n\nexport default function* rootSaga() {\n  yield takeLatest(actionTypes.GET_POSTS_REQUESTED, getAllPostsSaga);\n}\n","import { createStore, compose, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport reducers from './reducers';\nimport rootSaga from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n  reducers,\n  compose(applyMiddleware(sagaMiddleware))\n);\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}